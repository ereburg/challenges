extends layouts/_main

block variables
    //- put your vars here
    - var pageTitle= 'Code Challenges'

block content
    main(class="main")
         div(class="container")
            section(class="hero")
                div(class="hero__description")
                    h1(class="page__title") Code Challenges
                    p(class="hero__text") Every company has a different interview process, but one thing that is common among most employers is <em>giving a coding challenge</em>. Also known as <i>code katas</i>, these challenges are used to evaluate both your problem-solving skills as well as your knowledge of the language you are writing it in. There are many common challenges out there and I decided to create a project, where I could <em>collect</em> and <em>solve</em> one of the most well-known code katas. Well, as you guessed, the name of this special project is <em>Challenges</em>. 
                    p(class="hero__text") You can explore various front-end code katas made by me or by my friends, and, in addition, I decided to share some of personal code tasks, gists and snippets, design patterns and solutions for <abbr title="HyperText Markup Language">HTML</abbr> and <abbr title="Cascading Style Sheets">CSS</abbr> that I used to during my studying. Hope you'll enjoy this stuff, let's go!

            section(class="challenges")
                h2(class="visually-hidden") Challenges List
                header(class="challenges__description")
                    ul(class="hero__list filter")
                        li(class="filter__item"): button(class="filter__button filter__button--all active" type="button") All
                        li(class="filter__item"): button(class="filter__button filter__button--javascript" type="button") JavaScript                    
                        li(class="filter__item"): button(class="filter__button filter__button--animations" type="button") <abbr title="Cascading Style Sheets">CSS</abbr> Inspiration
                ul(class="challenges__container")
                    +challenge("Reverse a String", "javascript", "str-reverse", "Task", "#JS", "interview")
                        block challengeReverse
                            +code("Reverse a String", "str-reverse")
                                block codeReverse
                                    div(class="code__info")
                                        p(class="code__text") <strong>Reversing a string</strong> is one of the most frequently asked JavaScript question in the technical round of interview. Interviewers may ask you to write different ways to reverse a string, or they may ask you to reverse a string <em>without</em> using in-built methods, or they may even ask you to reverse a string using <em>recursion</em>. Below are my three most interesting ways to solve the problem of reversing a string in JavaScript.
                                        div(class="blockquote")
                                            p(class="code__text code__text--heading") Provided test cases:
                                            ul(class="code__content-list")
                                                li <span class="result-color--function-name">reverseString</span>("<span class="result-color--string">hello</span>") should return «<span class="result-color--apex">olleh</span>»
                                                li <span class="result-color--function-name">reverseString</span>("<span class="result-color--string">Howdy</span>") should return «<span class="result-color--apex">ydwoH</span>»
                                                li <span class="result-color--function-name">reverseString</span>("<span class="result-color--string">Greetings from Earth</span>") should return «<span class="result-color--apex">htraE morf sgniteerG</span>»
                                        ul(class="code-methods")
                                            li(class="code-methods__item")
                                                h3(class="code-methods__heading") 1. Reverse a String With Built-In Functions
                                                div(class="blockquote")
                                                    p(class="code__text code__text--heading") For this solution, we will use three methods:
                                                    ul(class="code__content-list")
                                                        +method("String", "split()")
                                                        +method("Array", "reverse()")
                                                        +method("Array", "join()")
                                                div(class="blockquote")
                                                    p(class="code__text code__text--heading") And the final code is:
                                                    pre(class="code__text" translate="no"): code.
                                                        <span class="result-color--function">function</span> <span class="result-color--function-name">reverseString</span>(str) {
                                                            <span class="result-color--apex">return</span> str.<span class="result-color--method">split(<span class="result-color--string">""</span>)</span>.<span class="result-color--method">reverse()</span>.<span class="result-color--method">join(<span class="result-color--string">""</span>)</span>;
                                                        }
                                                        <span class="result-color--function-name">reverseString</span>("<span class="result-color--string">hello</span>");

                                            li(class="code-methods__item")
                                                h3(class="code-methods__heading") 2. Reverse a String With a Decrementing For Loop
                                                p(class="code__text") First of all we should create an empty string that will host the new created string. Then create the <strong>FOR</strong> loop. And finally return the reversed string. And this code looks like:
                                                div(class="blockquote")
                                                    p(class="code__text code__text--heading") And the final code is:
                                                    pre(class="code__text" translate="no"): code.
                                                        <span class="result-color--function">function</span> <span class="result-color--function-name">reverseString</span>(str) {
                                                            <span class="result-color--function">var</span> newString = <span class="result-color--string">""</span>;
                                                            <span class="result-color--apex">for</span> (<span class="code__text-function">var</span> i = str.<span class="result-color--method">length</span> - 1; i >= 0; i<span class="result-color--method">--</span>) {
                                                                newString += str[i];
                                                            }
                                                            <span class="result-color--apex">return</span> newString;
                                                        }
                                                        <span class="result-color--function-name">reverseString</span>("<span class="result-color--string">hello</span>");
                                            
                                            li(class="code-methods__item")
                                                h3(class="code-methods__heading") 3. Reverse a String With Recursion
                                                div(class="blockquote")
                                                    p(class="code__text code__text--heading") For this solution, we will use two methods:
                                                    ul(class="code__content-list")
                                                        +method("String", "substr()")
                                                        +method("String", "charAt()")
                                                div(class="blockquote")
                                                    p(class="code__text code__text--heading") And the final code is:
                                                    pre(class="code__text" translate="no"): code.
                                                        <span class="result-color--function">function</span> <span class="result-color--function-name">reverseString</span>(str) {
                                                            <span class="result-color--apex">return</span> (str === <span class="result-color--string">' '</span>) <span class="result-color--apex">?</span> <span class="result-color--string">' '</span> <span class="result-color--apex">:</span>  <span class="result-color--function-name">reverseString</span>(str.<span class="result-color--method">substr(<span class="text-regular">1</span>)</span>) + str.<span class="result-color--method">charAt(<span class="text-regular">0</span>)</span>;
                                                        }
                                                        <span class="result-color--function-name">reverseString</span>("<span class="result-color--string">hello</span>");
                                        
                                    div(class="code__results code__results--methods")
                                        +reverseMethod("first", "reverse")
                                        +reverseMethod("second", "reverse")
                                        +reverseMethod("third", "reverse")

                                    template(id="template--reverse")
                                        li(class="code-method__item")
                                            p(class="code-method__result-text") <span class="result-color--function-name">reverseString</span> ("<span class="input-value result-color--string"></span>") returned next result: «<span class="output-value result-color--apex"></span>»

                    +challenge("Palindrome", "javascript", "palindrome", "Task", "#JS", "interview")
                        block challengePalindrom
                            +code("Check for Palindromes", "palindrome")
                                block codePalindrom
                                    div(class="code__info")
                                        dl(class="")
                                            dt: strong Palindrome
                                            dd is a word, phrase, number, or other sequence of characters which reads the same backward or forward.
                                        p(class="code__text") Well, as you guessed <strong>«Palindrome»</strong> is another one frequently asked JavaScript question at interviews. Interviewers may ask you to check string for palindromes using in-built methods, or without them. Below are my two ways to solve the problem.
                                        div(class="blockquote")
                                            p(class="code__text code__text--heading") Provided test cases:
                                            ul(class="code__content-list")
                                                +palindrome("race car", "true")
                                                +palindrome("not a palindrome", "false")
                                                +palindrome("A man, a plan, a canal. Panama", "true")
                                                +palindrome("never odd or even", "true")
                                                +palindrome("nope", "false")
                                                +palindrome("almostomla", "false")
                                                +palindrome("My age is 0, 0 si ega ym.", "true")
                                                +palindrome("1 eye for of 1 eye.", "false")
                                                +palindrome("0_0 (: /-\ :) 0–0", "true")
                                        ul(class="code-methods")
                                            li(class="code-methods__item")
                                                h3(class="code-methods__heading") 1. Check for Palindromes with built-in functions
                                                div(class="blockquote")
                                                    p(class="code__text code__text--heading") For this solution, we will use five methods:
                                                    ul(class="code__content-list")
                                                        +method("String", "toLowerCase()")
                                                        +method("String", "replace()")
                                                        +method("String", "split()")
                                                        +method("Array", "reverse()")
                                                        +method("Array", "join()")
                                                div(class="blockquote")
                                                    p(class="code__text code__text--heading") And the final code is:
                                                    pre(class="code__text" translate="no"): code.
                                                        <span class="result-color--function">function</span> <span class="result-color--function-name">palindrome</span>(str) {
                                                            <span class="result-color--function">const</span> re = <span class="result-color--string">/[\W_]/g</span>;
                                                            <span class="result-color--function">let</span> lowRegStr = str.<span class="result-color--method">toLowerCase</span>().<span class="result-color--method">replace</span>(re, <span class="result-color--string">' '</span>);
                                                            <span class="result-color--function">let</span> reverseStr = lowRegStr.<span class="result-color--method">split</span>(<span class="result-color--string">' '</span>).<span class="result-color--method">reverse</span>().<span class="result-color--method">join</span>(<span class="result-color--string">' '</span>); 
                                                            <span class="result-color--apex">return</span> reverseStr === lowRegStr;
                                                        }
                                                        <span class="result-color--function-name">palindrome</span>("<span class="result-color--string">hello</span>");
                                            li(class="code-methods__item")
                                                h3(class="code-methods__heading") 2. Check for Palindromes with a <strong>FOR</strong> loop
                                                p(class="code__text") Half-indexing (len/2) has benefits when processing <strong>large</strong>  strings. We check the end from each part and divide the number of iterations inside the <strong>FOR</strong> loop by two.
                                                div(class="blockquote")
                                                    p(class="code__text code__text--heading") And the final code is:
                                                    pre(class="code__text" translate="no"): code.
                                                        <span class="result-color--function">function</span> <span class="result-color--function-name">palindrome</span>(str) {
                                                            <span class="result-color--function">const</span> re = <span class="result-color--string">/[^A-Za-z0-9]/g</span>;
                                                            str = str.<span class="result-color--method">toLowerCase</span>().<span class="result-color--method">replace</span>(re, <span class="result-color--string">' '</span>);
                                                            <span class="result-color--function">let</span> len = str.<span class="result-color--method">length</span>;
                                                            <span class="result-color--apex">for</span> (<span class="result-color--function">let</span> i = 0; i &lt; len / 2; i<span class="result-color--method">++</span>) {
                                                                <span class="result-color--apex">if</span> (str[i] !== str[len - 1 - i]) {
                                                                    <span class="result-color--apex">return</span> <span class="result-color--function">false</span>;
                                                                }
                                                            }
                                                            <span class="result-color--apex">return</span> <span class="result-color--function">true</span>;
                                                        }
                                                        <span class="result-color--function-name">palindrome</span>("<span class="result-color--string">hello</span>");
                                        
                                    div(class="code__results code__results--methods")
                                        +palindromeMethod("first", "palindrome")
                                        +palindromeMethod("second", "palindrome")

                                    template(id="template--palindrome")
                                        li(class="code-method__item")
                                            p(class="code-method__result-text") <span class="result-color--function-name">palindrome</span> ("<span class="input-value result-color--string"></span>") function passed the check with result: <span class="output-value result-color--apex"></span>
                         
                    +challenge("FizzBuzz", "javascript", "fizzbuzz", "Task", "#JS", "interview")
                        block challengeFizzBuzz
                            +code("FizzBuzz", "fizzbuzz")
                                block codeFizzBuzz
                                    div(class="code__info") 
                                        p(class="code__text") The «<strong>FizzBuzz</strong>» test is an interview question designed to help filter out the 99.5% of programming job candidates which couldn't handle this task. There are many variations of this challenge, but they all typically go something like this: <q>Write a program that prints the numbers from 1 to 100. But for multiples of three print «Fizz» instead of the number and for the multiples of five print «Buzz». For numbers which are multiples of both three and five print «FizzBuzz».</q> <cite> &mdash; <small>&copy;</small> Some tech specialist at interview.</cite>
                                        div(class="grid-text-wrapper")
                                            p(class="code__text") I think FizzBuzz is <i>difficult</i> for major programmers for two reasons. First one, because it doesn't match any patterns which are studying on courses from scratch and, the second one, because there's no simple way to solve the code kata with build-in methods and display necessary tests without duplication in any commonly used modern programming languages &mdash; <em>FizzBuzz</em> doesn't fit any common pattern of coding structure below. 
                                            div(class="blockquote blockquote--center")
                                                pre: code.
                                                    <span class="result-color--apex">if</span> 1 <span class="result-color--method">then</span> A 
                                                    <span class="result-color--apex">else if</span> 2 <span class="result-color--method">then</span> B
                                                    <span class="result-color--apex">else if</span> 3 <span class="result-color--method">then</span> C
                                                    <span class="result-color--apex">else</span>/<span class="result-color--method">otherwise</span> D
                                        p(class="code__text") That's why I think this makes it a good discriminator, because employer wishes to hire candidates who can think for themselves &mdash; not those who are limited to copying solutions from others. Maybe there's no simple and satisfying way out to the code structuring issue, but let me introduce my own solution in JavaScript. You can choose <i>«Fizz»</i> and <i>«Buzz»</i> numbers manualy.

                                    div(class="code__results code__results--fizzbuzz")
                                        +fizzbuzzMethod("first", "fizzbuzz")

                                        template(id="template--fizzbuzz")
                                            li(class="code-method__item")
                                                span(class="code-method__result-text")

                    +challenge("Canvas Clock", "javascript", "clocks", "Course project", "#JS", "course")
                        block challengeClocks
                            +code("Canvas Clock", "clocks", "canvas")
                                block codeClocks
                                    div(class="code__info")
                                        p(class="code__text") The «<strong>Canvas Clock</strong>» is course project designed to help students to gain expierence with canvas <abbr title="application programming interface">API</abbr>. <code class="code-container"> &lt;canvas&gt; </code> is an HTML element which can be used to draw graphics via scripting. For instance, it can be used to draw graphs, combine photos, create different animations. On this page the «clock» shows the example of <code class="code-container"> &lt;canvas&gt; </code> implementation which I learned at courses. 
                                    div(class="code__content") 
                                        canvas(id="clock" width="300px" height="300px" aria-label="Clock built with canvas JS.") Please upgrade your browser. 
                    
                    +challenge("Canvas Ball", "javascript", "canvas challenge--canvas-ball", "Course project", "#JS", "course")
                        block challengeBall
                            +code("Canvas Ball", "canvas-ball", "canvas")
                                block codeBall
                                    div(class="code__info")
                                        p(class="code__text") The «<strong>Canvas Ball</strong>» is course project designed to help students to gain expierence with canvas <abbr title="application programming interface">API</abbr>. <code class="code-container"> &lt;canvas&gt; </code> is an HTML element which can be used to draw graphics via scripting. For instance, it can be used to draw graphs, combine photos, create different animations. On this page the bouncing ball animation shows the example of <code class="code-container"> &lt;canvas&gt; </code> implementation which I learned at courses. 
                                    div(class="code__content code__content--canvas-ball")
                                        canvas(id="ball" width="600px" height="400px" aria-label="Canvas Ball bouncing animation built with canvas API.") Please upgrade your browser.
                                        div(class="button--controls")
                                            button(class="button button--neumorph button--canvas-ball button--play" type="button") Play
                                            button(class="button button--neumorph button--canvas-ball button--stop" type="button") Stop

                    +challenge("Canvas Wizard", "javascript", "canvas challenge--canvas-wizard", "Course project", "#JS", "course")
                        block challengeWizard
                            +code("Canvas Wizard", "canvas-wizard", "canvas")
                                block codeWizard
                                    div(class="code__info")
                                        p(class="code__text") The «<strong>Canvas Wizard</strong>» is course project designed to help students to gain expierence with canvas <abbr title="application programming interface">API</abbr>. <code class="code-container"> &lt;canvas&gt; </code> is an HTML element which can be used to draw graphics via scripting. For instance, it can be used to draw graphs, combine photos, create different animations. In this challenge you are allowed to control the wizards' movements inside restricted area. Made just for fun. And works on all devices.
                                    div(class="code__content code__content--canvas-wizard")
                                        img(class="wizard-image", src="https://i.ibb.co/HHBFJdH/char.png", alt="Little wizard")
                                        canvas(id="wizard" width="600px" height="400px" aria-label="Canvas Wizard animation built with canvas API.") Please upgrade your browser.
                                        div(class="button--move-controls")
                                            button(class="button button--neumorph button--move button--up" type="button" data-text="↑") 
                                            button(class="button button--neumorph button--move button--right" type="button" data-text="→") 
                                            button(class="button button--neumorph button--move button--down" type="button" data-text="↓") 
                                            button(class="button button--neumorph button--move button--left" type="button" data-text="←") 


                    +challenge("Social Media Buttons", "animations", "social-buttons", "Inspiration", "#CSS", "inspiration")
                        block challengeSocials
                            +code("Social Media Buttons", "social-buttons")
                                block codeSocials
                                    div(class="code__info") 
                                        p(class="code__text") «<strong>CSS Inspiration</strong>» is a mini cycle of challenges, in which I'll create various design elements of the user interface. Examples include original animations, unusual transformations, creative elements and etc. All elements can be used for inspiration and modified by yourself. We constantly faced with social media elements on websites and apps, so I decided to create this challenge. The «<strong>Social Media Buttons</strong>» is a set of various hover effects in different design patterns that implemented on a list of social media links. 
                                    div(class="code__content code__content--social-buttons")
                                        ul(class="social-buttons__list" data-text="Colored design")
                                            +socialButton("facebook", "facebook")
                                            +socialButton("twitter", "twitter")
                                            +socialButton("youtube", "youtube")
                                            +socialButton("vk", "vk")
                                            +socialButton("instagram", "instagram")
                                            +socialButton("telegram", "telegram")
                                            +socialButton("github", "github")
                                            +socialButton("linkedin", "linkedin")
                                            +socialButton("behance", "behance")

                    +challenge("To-Do List App", "javascript", "previous", "Side project", "#JS", "previous")
                        block challengeWizard
                            +code("To-Do List App", "previous")
                                block codeWizard
                                    div(class="code__info")
                                        p(class="code__text") «<strong>To-Do List App</strong>» is project designed to help me to gain expierence with localStorage <abbr title="application programming interface">API</abbr>. 
                                    div(class="code__content code__content--previous")
                                        iframe(class="code__frame code__frame--todo" src="https://ereburg.github.io/todo-list/build" width="400" height="400" align="center").
                                            Upgrade your browser, it doesn't support iframes!
                    
                    +challenge("Weather App", "javascript", "previous", "Side project", "#JS", "previous")
                        block challengeWizard
                            +code("Weather App", "previous")
                                block codeWizard
                                    div(class="code__info")
                                        p(class="code__text") «<strong>Weather App</strong>» is project designed to help me to gain expierence with Fetch <abbr title="application programming interface">API</abbr>. 
                                    div(class="code__content code__content--previous")
                                        iframe(class="code__frame code__frame--weather" src="https://ereburg.github.io/weather-ow/" width="400" height="400" align="center").
                                            Upgrade your browser, it doesn't support iframes!
                    
                    +challenge("Currency Convertor App", "javascript", "previous", "Side project", "#JS")
                        block challengeWizard
                            +code("Currency Convertor App", "previous", "previous")
                                block codeWizard
                                    div(class="code__info")
                                        p(class="code__text") «<strong>Currency Convertor App</strong>» is project designed to help me to gain expierence with Fetch <abbr title="application programming interface">API</abbr>. 
                                    div(class="code__content code__content--previous")
                                        iframe(class="code__frame code__frame--weather" src="https://ereburg.github.io/currency/" width="400" height="400" align="center").
                                            Upgrade your browser, it doesn't support iframes!

                    //- +challenge("Canvas Wizard", "javascript", "canvas challenge--canvas-wizard", "Course project", "#JS")
                    //-     block challengeWizard
                    //-         +code("Canvas Wizard", "canvas-wizard")
                    //-             block codeWizard


block scripts
    script(src="scripts/scripts.min.js" defer)